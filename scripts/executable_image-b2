#!/usr/bin/env python
import requests
import string
import random
import os
from argparse import ArgumentParser
from datetime import datetime, timedelta

import pyperclip
from b2sdk import v2 as b2

parser = ArgumentParser()
parser.add_argument("image", help="path to image to upload")
parser.add_argument(
    "-t", "--timebomb", help="Delete after 24 hours", action="store_true"
)
parser.add_argument("-e", "--emojis", help="Use emojis instead ", action="store_true")
parser.add_argument(
    "--no-copy", help="do not copy the link", action="store_true", required=False
)
args = parser.parse_args()


if (not os.path.exists(args.image)) or (not os.path.isfile(args.image)):
    raise OSError("image not provided or unknown file type")


now = datetime.now()


info = b2.InMemoryAccountInfo()
b2_api = b2.B2Api(info)
b2_api.authorize_account(
    realm="production", application_key_id=os.getenv("B2_APPLICATION_KEY_ID"), application_key=os.getenv("B2_APPLICATION_KEY")
)
bucket = b2_api.get_bucket_by_name("botato-img-host")



adjectives = requests.get(
    "https://github.com/ShareX/ShareX/raw/develop/ShareX.HelpersLib/Resources/adjectives.txt"
).text.split("\n")

animals = requests.get(
    "https://github.com/ShareX/ShareX/raw/develop/ShareX.HelpersLib/Resources/animals.txt"
).text.split("\n")

if args.emojis:
    with open('~/scripts/emojis.txt', 'r') as f:
        emojis = f.read().split('\n')

adjective = random.choice(adjectives).title()
animal = random.choice(animals).title()

if args.emojis:
    # 3 random emojis
    rand = "".join(+[random.choice(emojis) for _ in range(3)])
else:
    # Provide 6 alphanumerical characters randomly (example: VYe11Y)
    rand = "".join(
        random.choice(string.ascii_letters + string.digits) for _ in range(6)
    )

# Get date path (format: YYYY/MM/DD)
curdate = now.strftime("%Y/%m/%d")

outPath = f"Flameshot/{curdate}/{'ðŸ’£_' if args.timebomb else ''}{adjective}{animal}_{rand}{os.path.splitext(args.image)[1]}"
outUrl = f"https://cdn.botato.gq/{outPath}"

additionalArgs = ""

if args.timebomb:
    expires = now + timedelta(days=1)
    timestampInMs = int(expires.timestamp() * 1000)


bucket.upload_local_file(
    local_file=args.image,
    file_name=outPath,
    file_retention=b2.FileRetentionSetting(
        mode="governance", retain_until=timestampInMs
    )
    if args.timebomb
    else None,
)

if not args.no_copy:
    pyperclip.copy(outUrl)

print(outUrl)
